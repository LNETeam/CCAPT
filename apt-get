--Developed by LNETeam
local tArgs = {...}
local noPrompt = false
local actions = {}
local iLink = ""
local data = ""
local reg = {}

local registry = 
{
    AddKeyValue = function(self,installVal)
        table.insert(self.keys,textutils.serialize(installVal))
    end,
}

local function newRegistry(existing)
    local temp = 
    {
        keys = {} --(existing ~= nil) and textutils.unserialize(existing) or ;
    }
    setmetatable(temp,{__index = registry})
    return temp
end
    

local function newKeyItem(val)
    local temp = 
    {
        items = val,
        time = 0,
    }
    return temp
end

function spool()
    while true do
        textutils.slowWrite("...");
        term.write("/b/b/b/b/b/b")
        sleep(1)
    end
end

if (fs.exists("/.apt-get_ver")) then 
    local handle = io.open("/.apt-get_ver","r")
    local existingKey = handle:read()
    handle:close()
    --if (string.len(existingKey) > 0) then
      --  reg = newRegistry(existingKey)
    --end
else
    reg = newRegistry()
end

--if (#tArgs~=2 or #tArgs~=3) then
 --   print("Usage: apt-get {install/remove/update} {package} [-np]") 
 --   return
--end

if (#tArgs==3 and tArgs[3] == "-np") then noPrompt = true end

term.write("Checking http")
function check()
    if (not http) then
    print("  [ERROR]")
    return
else
    print("  [OK]")
end
end
check()
--parallel.waitForAny(spool(),function() 

--end)



term.write("Checking repo")
function repo()
    local headers = 
    {
      ["stat"] = "http_test"
    }
    http.request("http://lneteam.ddns.net/repo.php",nil,headers)
    requesting = true
    while requesting do
        local event, url, sourceText = os.pullEvent()
  
        if event == "http_success" then
            local respondedText = sourceText.readAll()
    
            sourceText.close()
            print("  [OK]")
    
            requesting = false
        elseif event == "http_failure" then
            print("  [ERROR]")
    
            requesting = false
            return
        end
end
end
repo()
--parallel.waitForAny(spool(),function() 
    
--end)

if (tArgs[1] == "install") then mode = "install" end
if (tArgs[1] == "remove") then mode = "remove" end
if (tArgs[1] == "update") then mode = "update" end

if (mode == "install") then
    term.write("Locating package: "..tArgs[2])
    function locate()
        local headers = 
        {
          ["pack"] = tArgs[2]
        }
        http.request("http://lneteam.ddns.net/repo.php",nil,headers)
        requesting = true
        while requesting do
            local event, url, sourceText = os.pullEvent()
      
            if event == "http_success" then
                iLink = sourceText.readAll()
        
                sourceText.close()
                print("  [OK]")
        
                requesting = false
            elseif event == "http_failure" then
                print("  [ERROR]")
        
                requesting = false
                return
            end
        end
    end
    --parallel.waitForAny(spool(),function() 
        
    --end)
    term.write("Resolving package from: "..iLink)
    function resolve()
        local headers = 
        {
          ["pack"] = tArgs[2]
        }
        http.request(iLink)
        requesting = true
        while requesting do
            local event, url, sourceText = os.pullEvent()
      
            if event == "http_success" then
                data = sourceText.readAll()
                sourceText.close()
                if (string.len(data) == 0) then
                    return
                end
            
                local i = loadstring(data)
                actions = i()
                if (not install or not install.Dependencies or not install.InstallHierarchy) then
                    print(" [ERROR]")
                    return
                end
        
                
                print("  [OK]")
        
                requesting = false
            elseif event == "http_failure" then
                print("  [ERROR]")
        
                requesting = false
                return
            end
        end
    end
    resolve()
    --parallel.waitForAny(spool(),function() 
        
    --end)
    
    
    if (actions.PreAction ~= nil) then 
        if (not actions.PreAction()) then return end
    end
    
    if (#actions.Dependencies > 0) then
        for k,v in ipairs(actions.Dependencies) do
            print("Getting dependency: "..v)
            shell.run("apt-get install "..v) 
        end
    end
    
    print("Done indexing dependencies...  [OK]")
    
    
    fs.makeDir("/~tmp")
    
    term.write("Creating temporary directory ")
    function temp()
        if (not fs.exists("/~tmp")) then
            fs.makeDir("/~tmp")
            print("  [OK]")
            requesting = false
        else
            print(" [OK]")
        end
    end
    temp()
    --parallel.waitForAny(spool(),function() 
        
    --end)
    
    term.write("Getting package files ")
    function get()
        for k,v in pairs(actions.InstallHierarchy) do
            if (string.find(v[1],"/") ~= 1) then
                v[1] = "/"..v[1] 
            end
            local idx = string.find(iLink, "/[^/]*$")
            iLink = string.sub(iLink,0,idx-1)
            local url = iLink..v[1] 
            local h = io.open('tr','w')
            h:write(url)
            h:close()
            http.request(url)
            requesting = true
            dat = "";
            while requesting do
                local event, url, sourceText = os.pullEvent()
          
                if event == "http_success" then
                    dat = sourceText.readAll()
                    sourceText.close()            
                    
                    print("  [OK]")
            
                    requesting = false
                elseif event == "http_failure" then
                    print("  [ERROR]")
            
                    requesting = false
                    return
                end
            end
            local handle = io.open(v[2],'w')
            handle:write(dat)
            handle:close()

            print("  [OK]")
        end
    end
    get()
    --parallel.waitForAny(spool(),function() 
        
    --end)
    
    term.write("Adding package to registry ")
    function add()
        local key = newKeyItem(actions)
        --reg.AddKeyValue(key.items)
        print("  [OK]")
    end
    add()
    --parallel.waitForAny(spool(),function() 
        
    --end)
    
    if (actions.PostAction ~= nil) then
        print("Running post action")
        sleep(2)
        actions.PostAction()
    end
    
    term.write("Cleaning up files ")
    function clean()
        if (fs.exists("/~tmp")) then
            fs.delete("/~tmp") 
        end
        if (fs.exists(".apt-get_ver")) then
            fs.delete(".apt-get_ver") 
        end
        local handle = io.open(".apt-get_ver",'w')
        handle:write(textutils.serialize(reg.keys))
        handle:close()
        print("  [OK]")
    end
    clean()
    --parallel.waitForAny(spool(),function() 
        
    --end)
    
    print("Done!\r\n")
end

function IndexProgram(pname) --API
    if (fs.exists(".apt-get_ver")) then
        local handle = io.open(".apt-get_ver")
        local dat = handle:read()
        handle:close()
        local tReg = textutils.unserialize(dat)
        
    else
        return nil 
    end
end
